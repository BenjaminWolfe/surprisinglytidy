% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knit.R
\name{set_extension}
\alias{set_extension}
\title{Prepend class name to image extension}
\usage{
set_extension(options, prefix = ".", suffix = ".", sep = ".")
}
\arguments{
\item{options}{List. Options as passed by \code{knitr}.}

\item{prefix}{Character. See \code{details}.}

\item{suffix}{Character. See \code{details}.}

\item{sep}{Character. See \code{details}.}
}
\value{
Options to be passed back to \code{knitr}.
}
\description{
Add the class name before the extension of \code{knitr} images
}
\details{
When \code{class.output} is set, this function can add that class
before the file extension. From there, \code{pre-process.js} picks it up
by regex and adds the class to the plot.

\code{set_extension} handles multiple classes separated by spaces.
Periods are stripped out and spaces are replaced with \code{sep}.
The full filename looks like this:
\code{(filepath)/(filename).(prefix)(classes)(suffix).(extension)}

\code{pre-process.js} watches for this pattern, but \code{set_extension}
offers parameters to override them.
}
\examples{
\dontrun{
knitr::opts_hooks$set(
  class.output = surprisinglytidy::set_extension,
  dev = surprisinglytidy::set_extension
)
}
}
